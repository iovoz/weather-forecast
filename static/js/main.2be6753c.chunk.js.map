{"version":3,"sources":["redux/reducers/ajaxStatusReducer.js","redux/reducers/weatherForecastReducer.js","constants/constants.js","components/loading/LoadingSpinner.js","components/loading/LoadingContainer.js","components/inputs/InputField.js","components/inputs/Button.js","utils/validators.js","utils/helpers.js","containers/weatherForecast/WeatherForecastForm.js","containers/WeatherForecastContainer.js","redux/actions/weatherForecastActions.js","redux/reducers/languageReducer.js","components/Footer.js","redux/actions/languageActions.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/createStore.js","IntlWrapper.js","index.js"],"names":["FETCH_PENDING","FETCH_COMPLETE","SERVER_ERROR","RESET_STATUS","initialState","actionName","isServerError","isLoading","serverStatus","serverMessage","serverErrors","WEATHER_FORECAST_FIVE_DAYS_SUMMARY","WEATHER_FORECAST_FIVE_DAYS_DETAILS","city","listSummary","listDetails","APPID_FREE","APPID_PUBLIC","languages","lang","name","LoadingSpinner","className","Component","LoadingContainer","this","props","children","loading","Fragment","defaultProps","InputField","input","meta","type","disable","placeholder","maxLength","disabled","classNames","touched","error","id","Button","submitting","onClick","required","value","Array","isArray","length","undefined","convertDegreeCtoF","degree","WeatherForecastForm","fetchOneDayDetails","date","searchDetails","setState","showOneDayDetails","showFiveDaysList","submitHandler","searchSummary","location","state","intl","handleSubmit","ajaxStatus","formatMessage","temperatureTitle","sunrise","sunset","Date","sys","onSubmit","Field","component","validate","notFound","values","amount","map","it","i","currentDate","dt","key","moment","format","locale","getDay","src","weather","icon","alt","width","height","temp","min","toFixed","max","description","wind","speed","cloud","clouds","hpa","pressure","Math","round","main","deg","humidity","target","rel","href","coord","lat","lon","dt_txt","substring","all","reduxForm","form","injectIntl","WeatherForecastContainer","fetchWeatherForecastFiveDaysSummary","fetchWeatherForecastFiveDaysDetails","connect","weatherForecast","dispatch","getState","a","url","constants","language","axios","get","current","data","response","millisecond","getTime","list","filter","slice","reduce","acc","cur","push","CHANGE_LANGUAGE","localStorage","getItem","Footer","changeLanguage","e","newLang","find","item","changeUILanguage","onChange","App","Boolean","window","hostname","match","combineReducers","formReducer","action","setItem","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","IntlWrapper","locales","messages","textComponent","ReactDOM","render","en","tc","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2be6753c.chunk.js","sourcesContent":["export const FETCH_PENDING = 'weatherForecast/ajaxStatus/fetchPending';\nexport const FETCH_COMPLETE = 'weatherForecast/ajaxStatus/fetchComplete';\nexport const SERVER_ERROR = 'weatherForecast/ajaxStatus/serverError';\nexport const RESET_STATUS = 'weatherForecast/ajaxStatus/resetStatus';\n\nconst initialState = {\n    actionName: '',\n    isServerError: false,\n    isLoading: false,\n    serverStatus: '',\n    serverMessage: '',\n    serverErrors: []\n};\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case SERVER_ERROR:\n            return {\n                ...state,\n                isServerError: true,\n                isLoading: false,\n                serverStatus: action.serverStatus,\n                serverMessage: action.serverMessage,\n                serverErrors: action.serverErrors\n            };\n        case FETCH_PENDING:\n            return {\n                ...state,\n                isLoading: true,\n                actionName: action.actionName\n            };\n        case FETCH_COMPLETE:\n            return {\n                ...state,\n                isLoading: false,\n                isServerError: false,\n                serverStatus: ''\n            };\n        case RESET_STATUS:\n            return {\n                ...state,\n                isServerError: false,\n                isLoading: false,\n                serverStatus: '',\n                serverMessage: ''\n            };\n        default:\n            return state;\n    }\n}\n","export const WEATHER_FORECAST_FIVE_DAYS_SUMMARY = 'weatherForecast/fetchWeatherForecastFiveDaysSummary';\nexport const WEATHER_FORECAST_FIVE_DAYS_DETAILS = 'weatherForecast/fetchWeatherForecastFiveDaysDetails';\n\nconst initialState = {\n    city: {},\n    listSummary: [],\n    listDetails: {}\n};\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case WEATHER_FORECAST_FIVE_DAYS_SUMMARY:\n            return {\n                ...state,\n                city: action.city,\n                listSummary: action.listSummary\n            };\n        case WEATHER_FORECAST_FIVE_DAYS_DETAILS:\n            return {\n                ...state,\n                listDetails: action.listDetails,\n            };\n        default:\n            return state;\n    }\n}\n","export default {\n    APPID_FREE: '2bbb7a13c5e8efdf6991a3e834763af4',\n    APPID_PUBLIC: 'b6907d289e10d714a6e88b30761fae22',\n    languages: [\n        {lang: 'en', name: 'English'},\n        {lang: 'tc', name: '中文'}\n    ]\n}\n","import React, { Component } from 'react';\nimport './loading.css';\n\nexport default class LoadingSpinner extends Component {\n    render() {\n        return (\n            <div className=\"spinner\">\n                <div className=\"bounce1\"/>\n                <div className=\"bounce2\"/>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default class LoadingContainer extends Component {\n    static propTypes = {\n        children: PropTypes.node.isRequired,\n        loading: PropTypes.bool\n    };\n\n    static defaultProps = {\n        loading: false\n    };\n\n    render() {\n        const { children, loading } = this.props;\n        return (\n            <React.Fragment>\n                {loading ? <LoadingSpinner/> : children}\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nexport default class InputField extends Component {\n    static propTypes = {\n        input: PropTypes.object.isRequired,\n        meta: PropTypes.object.isRequired,\n        placeholder: PropTypes.string,\n        className: PropTypes.string,\n        type: PropTypes.string,\n        maxLength: PropTypes.number,\n        disable: PropTypes.bool\n    };\n\n    static defaultProps = {\n        className: 'form-control',\n        placeholder: '',\n        type: 'text',\n        maxLength: null,\n        disable: false\n    };\n\n    render() {\n        const { input, meta, type, disable, placeholder, maxLength, className } = this.props;\n\n        return (\n            <React.Fragment>\n                <input\n                    type={type}\n                    {...input}\n                    disabled={disable}\n                    maxLength={maxLength}\n                    placeholder={placeholder}\n                    className={classNames(className, { 'form-control-invalid': meta.touched && meta.error })}\n                />\n                {meta.touched && meta.error && <div className=\"error\"><FormattedMessage id={meta.error} /></div>}\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends Component {\n    static propTypes = {\n        type: PropTypes.string.isRequired,\n        children: PropTypes.node.isRequired,\n        disabled: PropTypes.bool,\n        className: PropTypes.string,\n        submitting: PropTypes.bool,\n        onClick: PropTypes.func\n    };\n\n    static defaultProps = {\n        disabled: false,\n        submitting: false,\n        className: 'btn btn-orange',\n        onClick: () => {}\n    };\n\n    render() {\n        const { disabled, submitting, className } = this.props;\n\n        return (\n            <button\n                type={this.props.type}\n                className={className}\n                disabled={disabled || submitting}\n                onClick={this.props.onClick}\n            >\n                {submitting && <i className=\"fa fa-spinner fa-spin\" />} {this.props.children}\n            </button>\n        );\n    }\n}\n","export const required = value =>\n    (Array.isArray(value) && value.length < 1) || (!value && value !== 0) ? 'validator.input.requiredField' : undefined;\n","export function convertDegreeCtoF(degree) {\n    return degree * 9 / 5 + 32;\n}\n\nexport function convertDegreeFtoC(degree) {\n    return degree - 32 * 5 / 9;\n}\n\nexport function convertWindDegree(degree) {\n    if (degree <= 10 || degree >= 350) return 'common.wind.north';\n    if (degree > 10 && degree < 45) return 'common.wind.northEast';\n    if (degree >= 315 && degree < 350) return 'common.wind.northWest';\n\n    if (degree >= 80 && degree <= 100) return 'common.wind.east';\n    if (degree >= 45 && degree < 80) return 'common.wind.eastNorth';\n    if (degree > 100 && degree < 135) return 'common.wind.eastSouth';\n\n    if (degree >= 170 && degree <= 190) return 'common.wind.south';\n    if (degree >= 135 && degree < 170) return 'common.wind.southEast';\n    if (degree > 190 && degree < 225) return 'common.wind.southWest';\n\n    if (degree >= 260 && degree < -280) return 'common.wind.west';\n    if (degree >= 225 && degree < 260) return 'common.wind.westSouth';\n    if (degree > 280 && degree < 315) return 'common.wind.westNorth';\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport { FormattedMessage, FormattedHTMLMessage, injectIntl } from 'react-intl';\nimport LoadingContainer from '../../components/loading/LoadingContainer';\nimport InputField from '../../components/inputs/InputField';\nimport Button from '../../components/inputs/Button';\nimport { required } from '../../utils/validators';\nimport { convertDegreeCtoF, convertWindDegree } from '../../utils/helpers';\nimport moment from 'moment';\n\nclass WeatherForecastForm extends Component {\n    static propTypes = {\n        intl: PropTypes.object.isRequired,\n        ajaxStatus: PropTypes.object.isRequired,\n        city: PropTypes.object.isRequired,\n        listSummary: PropTypes.array.isRequired,\n        listDetails: PropTypes.object.isRequired,\n        handleSubmit: PropTypes.func.isRequired,\n        searchSummary: PropTypes.func.isRequired,\n        searchDetails: PropTypes.func.isRequired\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showOneDayDetails: ''\n        };\n    }\n\n    fetchOneDayDetails = (date) => {\n        const { listDetails, searchDetails } = this.props;\n        this.setState({\n            showOneDayDetails: date\n        }, () => {\n            if (!listDetails[date]) {\n                searchDetails();\n            }\n        });\n    };\n\n    showFiveDaysList = () => {\n        this.setState({\n            showOneDayDetails: ''\n        });\n    };\n\n    submitHandler = value => {\n        this.setState({\n            showOneDayDetails: ''\n        }, () => {\n            this.props.searchSummary(value.location);\n        });\n    };\n\n    render() {\n        const { city, listSummary, listDetails, intl, handleSubmit, ajaxStatus } = this.props;\n        const placeholder = intl.formatMessage({ id: 'weather.forecast.cityName' });\n        let temperatureTitle = '', sunrise = '', sunset = '';\n        if (this.state.showOneDayDetails) {\n            temperatureTitle = intl.formatMessage({ id: 'weather.forecast.title' }, {\n                city: city.name\n            });\n            sunrise = new Date(city.sys.sunrise * 1000);\n            sunset = new Date(city.sys.sunset * 1000);\n        }\n\n        return (\n            <form className=\"form-horizontal\" onSubmit={handleSubmit(this.submitHandler)}>\n                <div className=\"form-group\">\n                    <div className=\"search-engine\">\n                        <div className=\"search-input\">\n                            <Field\n                                name=\"location\"\n                                type=\"text\"\n                                placeholder={placeholder}\n                                component={InputField}\n                                className=\"form-control\"\n                                validate={[required]}\n                                disabled={ajaxStatus.isLoading}\n                            />\n                        </div>\n                        <Button type=\"submit\" submitting={ajaxStatus.isLoading}>\n                            <FormattedMessage id=\"weather.forecast.search\"/>\n                        </Button>\n                    </div>\n                </div>\n                {!this.state.showOneDayDetails && (\n                    <div className=\"form-group\">\n                        <LoadingContainer loading={ajaxStatus.isLoading}>\n                            <div className=\"col-md-12\">\n                                <div className=\"data-list-summary\">\n                                    {city.notFound === true && (\n                                        <div className=\"col-md-8 alert alert-warning\">\n                                            <FormattedMessage id=\"weather.forecast.dataNotFound\"/>\n                                        </div>\n                                    )}\n                                    {\n                                        listSummary.length > 0 && (\n                                            <div className=\"weather-forecast-list\">\n                                                <h3 className=\"weather-forecast-list__header\">\n                                                    <FormattedMessage id=\"weather.forecast.daysAmount\"\n                                                                      values={{ amount: 5 }}/>\n                                                </h3>\n                                                <div className=\"weather-forecast-list__body\">\n                                                    {\n                                                        listSummary.map((it, i) => {\n                                                            const currentDate = new Date(it.dt * 1000);\n                                                            return (\n                                                                <div key={i}\n                                                                     className=\"weather-forecast-list__body__item\"\n                                                                     onClick={() => this.fetchOneDayDetails(moment(currentDate).format('YYYY-MM-DD'))}>\n                                                                    {intl.locale === 'en' && (\n                                                                        <div className=\"day\">\n                                                                            {moment(currentDate).format('Do MMMM')}<br/>\n                                                                            <FormattedMessage\n                                                                                id={`common.day-${currentDate.getDay()}`}/>\n                                                                        </div>\n                                                                    )}\n                                                                    {intl.locale === 'tc' && (\n                                                                        <div className=\"day\">\n                                                                            {moment(currentDate).format('MMMM Do')}<br/>\n                                                                            （<FormattedMessage\n                                                                            id={`common.day-${currentDate.getDay()}`}/>）\n                                                                        </div>\n                                                                    )}\n                                                                    <div className=\"icon\">\n                                                                        <img\n                                                                            src={`https://openweathermap.org/img/wn/${it.weather[0].icon}@2x.png`}\n                                                                            alt=\"forecast\" width=\"50\" height=\"50\"/>\n                                                                    </div>\n                                                                    <div\n                                                                        className=\"temp\">{it.temp.min.toFixed(1)} ~ {it.temp.max.toFixed(1)} °C\n                                                                    </div>\n                                                                    <div\n                                                                        className=\"temp\">{convertDegreeCtoF(it.temp.min).toFixed(1)} ~ {convertDegreeCtoF(it.temp.max).toFixed(1)} °F\n                                                                    </div>\n                                                                    <div className=\"cond\">\n                                                                        {it.weather[0].description}\n                                                                    </div>\n                                                                    <div className=\"wind\">\n                                                                        <FormattedMessage id=\"weather.forecast.wind\"\n                                                                                          values={{ wind: it.speed }}/>\n                                                                    </div>\n                                                                    <div className=\"other\">\n                                                                        <FormattedMessage\n                                                                            id=\"weather.forecast.otherCond\"\n                                                                            values={{\n                                                                                cloud: it.clouds,\n                                                                                hpa: it.pressure\n                                                                            }}/>\n                                                                    </div>\n                                                                </div>\n                                                            );\n                                                        })\n                                                    }\n                                                </div>\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                            </div>\n                        </LoadingContainer>\n                    </div>\n                )}\n                {this.state.showOneDayDetails && (\n                    <div className=\"form-group\">\n                        <LoadingContainer loading={ajaxStatus.isLoading}>\n                            <div className=\"col-md-12\">\n                                <div className=\"date-layout\">\n                                    <div className=\"date-layout__today\">\n                                        <h2 className=\"title\">{temperatureTitle}</h2>\n                                        <h3 className=\"temperature\">\n                                            <img className=\"__img\"\n                                                 src={`https://openweathermap.org/img/wn/${city.weather[0].icon}@2x.png`}\n                                                 alt={temperatureTitle} width=\"50\" height=\"50\"/>\n                                            {Math.round(city.main.temp)} °C\n                                            / {Math.round(convertDegreeCtoF(city.main.temp))} °F\n                                        </h3>\n                                        <div className=\"date-layout__items\">\n                                            <div className=\"date-layout__items__item\">\n                                                <FormattedMessage id=\"common.wind\"/>{`: `}\n                                                <FormattedMessage id=\"weather.forecast.wind\"\n                                                                  values={{ wind: city.wind.speed }}/>,\n                                                <FormattedMessage\n                                                    id={convertWindDegree(city.wind.deg)}/> ({city.wind.deg})\n                                            </div>\n                                            <div className=\"date-layout__items__item\">\n                                                <FormattedMessage\n                                                    id=\"common.cloudiness\"/>: {city.weather[0].description}</div>\n                                            <div className=\"date-layout__items__item\">\n                                                <FormattedMessage id=\"common.pressure\"/>: {city.main.pressure} hpa\n                                            </div>\n                                            <div className=\"date-layout__items__item\">\n                                                <FormattedMessage id=\"common.humidity\"/>: {city.main.humidity} %\n                                            </div>\n                                            <div className=\"date-layout__items__item\">\n                                                <FormattedMessage id=\"common.sunrise\"/>: {moment(sunrise).format('LT')}\n                                            </div>\n                                            <div className=\"date-layout__items__item\">\n                                                <FormattedMessage id=\"common.sunset\"/>: {moment(sunset).format('LT')}\n                                            </div>\n                                            <div className=\"date-layout__items__item\">\n                                                <FormattedMessage id=\"common.geoCoords\"/>{`: `}\n                                                <a target=\"_blank\" rel=\"noopener noreferrer\"\n                                                   href={`https://openweathermap.org/weathermap?zoom=8&lat=${city.coord.lat}&lon=${city.coord.lon}`}>\n                                                    [{city.coord.lat}, {city.coord.lon}]\n                                                </a>\n                                            </div>\n                                        </div>\n                                        <div className=\"back-to-list\">\n                                            <div className=\"btn btn-orange\" onClick={this.showFiveDaysList}>\n                                                <FormattedMessage id=\"common.backToForecastList\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"date-layout__hourly\">\n                                        <h2 className=\"title\">\n                                            <FormattedHTMLMessage id=\"weather.forecast.hourlyTitle\" values={{date: this.state.showOneDayDetails}}/>\n                                        </h2>\n                                        {\n                                            listDetails[this.state.showOneDayDetails] && listDetails[this.state.showOneDayDetails].map(it => {\n                                                return (\n                                                    <div className=\"item\" key={it.dt}>\n                                                        <div className=\"time\">\n                                                            {it.dt_txt.substring(11, 16)}\n                                                            <img src={`https://openweathermap.org/img/wn/${it.weather[0].icon}@2x.png`} alt=\"forecast\" width=\"50\" height=\"50\"/>\n                                                        </div>\n                                                        <div className=\"others\">\n                                                            <div className=\"temp\">\n                                                                {it.main.temp} °C / {Math.round(convertDegreeCtoF(it.main.temp))} °F, {it.weather[0].description}\n                                                            </div>\n                                                            <div className=\"cond\">\n                                                                <FormattedMessage id=\"weather.forecast.wind\"\n                                                                                  values={{ wind: it.wind.speed }}/>,\n                                                                <FormattedMessage\n                                                                    id=\"weather.forecast.otherCond\"\n                                                                    values={{\n                                                                        cloud: it.clouds.all,\n                                                                        hpa: it.main.pressure\n                                                                    }}/>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                )\n                                            })\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        </LoadingContainer>\n                    </div>\n                )}\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'weatherForecastForm'\n})(injectIntl(WeatherForecastForm));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n    fetchWeatherForecastFiveDaysSummary,\n    fetchWeatherForecastFiveDaysDetails\n} from '../redux/actions/weatherForecastActions';\nimport WeatherForecastForm from './weatherForecast/WeatherForecastForm';\n\nclass WeatherForecastContainer extends Component {\n    static propTypes = {\n        ajaxStatus: PropTypes.object.isRequired,\n        fetchWeatherForecastFiveDaysSummary: PropTypes.func.isRequired,\n        fetchWeatherForecastFiveDaysDetails: PropTypes.func.isRequired,\n        city: PropTypes.object,\n        listSummary: PropTypes.array,\n        listDetails: PropTypes.object\n    };\n\n    static defaultProps = {\n        city: {},\n        listSummary: [],\n        listDetails: {}\n    };\n\n    render() {\n        const { ajaxStatus, city, listSummary, listDetails,\n            fetchWeatherForecastFiveDaysSummary,\n            fetchWeatherForecastFiveDaysDetails } = this.props;\n\n        return (\n            <div className=\"form-group weather-forecast\">\n                <WeatherForecastForm\n                    ajaxStatus={ajaxStatus}\n                    city={city}\n                    listSummary={listSummary}\n                    listDetails={listDetails}\n                    searchSummary={fetchWeatherForecastFiveDaysSummary}\n                    searchDetails={fetchWeatherForecastFiveDaysDetails}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    ajaxStatus: state.ajaxStatus,\n    city: state.weatherForecast.city,\n    listSummary: state.weatherForecast.listSummary,\n    listDetails: state.weatherForecast.listDetails\n});\n\nexport default connect(mapStateToProps, {\n    fetchWeatherForecastFiveDaysSummary,\n    fetchWeatherForecastFiveDaysDetails\n})(WeatherForecastContainer);\n","import { FETCH_PENDING, FETCH_COMPLETE, SERVER_ERROR } from '../reducers/ajaxStatusReducer';\nimport {\n    WEATHER_FORECAST_FIVE_DAYS_SUMMARY,\n    WEATHER_FORECAST_FIVE_DAYS_DETAILS\n} from '../reducers/weatherForecastReducer';\nimport constants from '../../constants/constants';\nimport axios from 'axios';\n\nexport function fetchWeatherForecastFiveDaysSummary(location) {\n    return async (dispatch, getState) => {\n        try {\n            dispatch({\n                type: FETCH_PENDING\n            });\n\n            const state = getState();\n            let url = `http://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${constants.APPID_FREE}&units=metric`;\n            if (state.language.lang === 'tc') url += '&lang=zh_tw';\n            const current = await axios.get(url);\n\n            url = `https://openweathermap.org/data/2.5/forecast/daily/?appid=${constants.APPID_PUBLIC}&id=${current.data.id}&units=metric`;\n            if (state.language.lang === 'tc') url += '&lang=zh_tw';\n            const response = await axios.get(url);\n\n            let listSummary = [];\n            const millisecond = new Date().getTime();\n            if (response.data.list) listSummary = response.data.list.filter(it => it.dt*1000 > millisecond).slice(0, 5);\n\n            dispatch({\n                type: WEATHER_FORECAST_FIVE_DAYS_SUMMARY,\n                city: current.data || {},\n                listSummary\n            });\n\n            dispatch({\n                type: FETCH_COMPLETE\n            });\n        } catch (e) {\n            dispatch({\n                type: WEATHER_FORECAST_FIVE_DAYS_SUMMARY,\n                city: { notFound: true },\n                listSummary: []\n            });\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: e.response\n            });\n        }\n    };\n}\n\nexport function fetchWeatherForecastFiveDaysDetails() {\n    return async (dispatch, getState) => {\n        try {\n            dispatch({\n                type: FETCH_PENDING\n            });\n\n            const state = getState();\n            let url = `http://api.openweathermap.org/data/2.5/forecast?id=${state.weatherForecast.city.id}&appid=${constants.APPID_FREE}&units=metric`;\n            if (state.language.lang === 'tc') url += '&lang=zh_tw';\n            const response = await axios.get(url);\n\n            let listDetails = {};\n            if (response.data.list) {\n                listDetails = response.data.list.reduce((acc, cur) => {\n                    const date = cur.dt_txt.substring(0, 10);\n                    if (acc[date]) acc[date].push(cur);\n                    else acc[date] = [cur];\n                    return acc;\n                }, {});\n            }\n            dispatch({\n                type: WEATHER_FORECAST_FIVE_DAYS_DETAILS,\n                listDetails\n            });\n\n            dispatch({\n                type: FETCH_COMPLETE\n            });\n        } catch (e) {\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: e.response\n            });\n        }\n    };\n}\n","export const CHANGE_LANGUAGE = 'weatherForecast/changeLanguage';\n\nconst initialState = {\n    lang: localStorage.getItem('wf-app-locale') || 'en'\n};\n\nexport default function reducer(state = initialState, action= {}) {\n    switch (action.type) {\n        case CHANGE_LANGUAGE:\n            localStorage.setItem('wf-app-locale', action.lang);\n            return {\n                ...state,\n                lang: action.lang\n            };\n        default:\n            return state;\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport constants from '../constants/constants';\nimport { changeUILanguage } from '../redux/actions/languageActions';\n\nclass Footer extends Component {\n    static propTypes = {\n        lang: PropTypes.string.isRequired,\n        changeUILanguage: PropTypes.func.isRequired\n    };\n\n    changeLanguage = e => {\n        const newLang = constants.languages.find(item => item.lang === e.target.value);\n        this.props.changeUILanguage(newLang.lang);\n    };\n\n    render() {\n        const { lang } = this.props;\n\n        return (\n            <div className=\"row col-md-12\">\n                <div className=\"language-switch\">\n                    <select\n                        name=\"status\"\n                        className=\"form-control\"\n                        value={lang}\n                        onChange={this.changeLanguage}\n                    >\n                        {constants.languages.map(item => {\n                            return (\n                                <option key={item.lang} value={item.lang}>\n                                    {item.name}\n                                </option>\n                            );\n                        })}\n                    </select>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    lang: state.language.lang\n});\n\nexport default connect(mapStateToProps, { changeUILanguage })(Footer);\n","import { CHANGE_LANGUAGE } from '../reducers/languageReducer';\n\nexport function changeUILanguage(lang) {\n    return async dispatch => {\n        dispatch({\n            type: CHANGE_LANGUAGE,\n            lang\n        });\n    }\n}\n","import React from 'react';\nimport './App.scss';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport WeatherForecastContainer from './containers/WeatherForecastContainer';\nimport Footer from './components/Footer';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"App-content\">\n                <WeatherForecastContainer/>\n            </div>\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport languageReducer from './reducers/languageReducer';\nimport ajaxStatusReducer from './reducers/ajaxStatusReducer';\nimport weatherForecastReducer from './reducers/weatherForecastReducer';\n\nexport default combineReducers({\n    form: formReducer,\n    language: languageReducer,\n    ajaxStatus: ajaxStatusReducer,\n    weatherForecast: weatherForecastReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [ thunk ];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        ...enhancers\n    )\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\n\nfunction Fragment(props) {\n    return props.children || <span {...props} /> || null;\n}\n\nclass IntlWrapper extends Component {\n    static propTypes = {\n        store: PropTypes.object.isRequired,\n        children: PropTypes.node.isRequired,\n        lang: PropTypes.string.isRequired,\n        locales: PropTypes.shape({\n            'en': PropTypes.object,\n            'tc': PropTypes.object\n        }).isRequired\n    };\n\n    render() {\n        const { lang, locales, store, children } = this.props;\n\n        return (\n            <Provider store={store}>\n                <IntlProvider locale={lang} messages={locales[lang]} textComponent={Fragment}>\n                    {children}\n                </IntlProvider>\n            </Provider>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({ lang: state.language.lang });\n\nexport default connect(mapStateToProps)(IntlWrapper);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/createStore';\nimport IntlWrapper from './IntlWrapper';\nimport en from './locales/en.json';\nimport tc from './locales/tc.json';\n\nReactDOM.render(\n    <IntlWrapper store={store} locales={{'en': en, 'tc': tc}}>\n        <App />\n    </IntlWrapper>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}